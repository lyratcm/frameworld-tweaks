namespace = giga_frameworld_origin
@frameworld_outpost_disassembly_reward = 50

###############################################################################################################################################
# System initialiser finisher, upgrade notifications
###############################################################################################################################################

### game start
country_event = {
    id = giga_frameworld_origin.000
    hide_window = yes
    is_triggered_only = yes

    trigger = {
        has_origin = origin_frameworld # specifically not the trigger because any variant would likely want a different setup event
    }

    immediate = {
        set_variable = {
            which = giga_frameworld_megastructure_cost
            value = 1
        }

        ##### set up documentation

        begin_event_chain = {
            event_chain = giga_frameworld_docs_chain
        }

        create_point_of_interest = {
            id = giga_frameworld_docs_chain.1
            name = "giga_frameworld_docs_expansion"
            desc = "giga_frameworld_docs_expansion_desc"
            event_chain = "giga_frameworld_docs_chain"
            location = capital_scope
        }

        create_point_of_interest = {
            id = giga_frameworld_docs_chain.2
            name = "giga_frameworld_docs_asteroids"
            desc = "giga_frameworld_docs_asteroids_desc"
            event_chain = "giga_frameworld_docs_chain"
            location = capital_scope
        }

        create_point_of_interest = {
            id = giga_frameworld_docs_chain.3
            name = "giga_frameworld_docs_outposts"
            desc = "giga_frameworld_docs_outposts_desc"
            event_chain = "giga_frameworld_docs_chain"
            location = capital_scope
        }

        create_point_of_interest = {
            id = giga_frameworld_docs_chain.4
            name = "giga_frameworld_docs_districts"
            desc = "giga_frameworld_docs_districts_desc"
            event_chain = "giga_frameworld_docs_chain"
            location = capital_scope
        }

        create_point_of_interest = {
            id = giga_frameworld_docs_chain.5
            name = "giga_frameworld_docs_conquest"
            desc = "giga_frameworld_docs_conquest_desc"
            event_chain = "giga_frameworld_docs_chain"
            location = capital_scope
        }

        create_point_of_interest = {
            id = giga_frameworld_docs_chain.6
            name = "giga_frameworld_docs_stations"
            desc = "giga_frameworld_docs_stations_desc"
            event_chain = "giga_frameworld_docs_chain"
            location = capital_scope
        }

        create_point_of_interest = {
            id = giga_frameworld_docs_chain.7
            name = "giga_frameworld_docs_disabled"
            desc = "giga_frameworld_docs_disabled_desc"
            event_chain = "giga_frameworld_docs_chain"
            location = capital_scope
        }

        create_point_of_interest = {
            id = giga_frameworld_docs_chain.8
            name = "giga_frameworld_docs_bonuses"
            desc = "giga_frameworld_docs_bonuses_desc"
            event_chain = "giga_frameworld_docs_chain"
            location = capital_scope
        }

        ##### END DOCS

        # start outpost situation
        start_situation = {
            type = giga_situation_frameworld_outposts
            target = capital_scope
        }

        # set up AI variables
        set_variable = {
            which = frameworld_ai_outpost_candidate_count
            value = 0
        }

        #event_target:giga_global_situation_country = {
        #	start_situation = {
        #		type = giga_situation_frameworld_planet_effects
        #		target = prev.capital_scope
        #	}
        #}

        # associate this country with a specific frame
        set_country_flag = giga_frameworld@capital_scope

        capital_scope = {
            # associate the frameworld with the country too
            set_planet_flag = giga_frameworld@root

            # clear the conquered modifier which apparently gets executed BEFORE the start event
            remove_modifier = frameworld_conquered

            # fix the entity
            giga_frameworld_update_entity_with_fallback = {
                WHO = root
            }

            # spawn defensive stations
            giga_frameworld_spawn_starting_defensive_stations = { WHO = root }

            # clear normal planet stuff we can't use
            clear_deposits = yes
            #remove_all_districts = yes # this wrecks our lab due to not enough building slots

            # strip extra resources from the black hole, we want to make sure it's clean
            solar_system.star = {
                clear_deposits = yes
            }

            # make sure the variables are set up for expansion decisions
            giga_frameworld_init_variables = yes

            # set other AI variables
            set_variable = {
                which = frameworld_ai_artisan_modifier
                value = 0
            }

            ##### set up deposits

            # an appropriate core
            if = {
                limit = { root = { is_regular_empire = yes }	}
                add_deposit = d_frameworld_admin
            }
            else_if = {
                limit = { root = { is_hive_empire = yes }	}
                add_deposit = d_frameworld_hive
            }
            else_if = {
                limit = { root = { is_machine_empire = yes }	}
                add_deposit = d_frameworld_core
            }

            # max mining districts
            add_deposit = d_frameworld_remnants

            # environmentalist nature preserve
            if = {
                limit = {
                    root = { giga_is_environmentalist = yes }
                }
                remove_building = building_ranger_lodge
                add_deposit = d_frameworld_nature_preserve
            }

            # job upkeep adjustment
            add_deposit = d_giga_job_upkeep

            ##### replace districts
            add_modifier = {
                modifier = frameworld_building_wreck_fix
                days = 3
            }
            # add_district = district_giga_frameworld_urban_01
            # add_zone = {
            #     district = district_giga_frameworld_urban_01
            #     zone = zone_giga_frameworld_foundry
            #     zone_slot = 0
            #     replace = no
            # }
            # add_building = {
            #     district = district_giga_frameworld_urban_01
            #     zone = zone_giga_frameworld_foundry
            #     building = building_foundry_1
            # }
            remove_building = building_holo_theatres
            adding_district_zone_or_building = { DISTRICT = district_giga_frameworld_urban_01 ZONE = zone_giga_frameworld_foundry BUILDING = building_foundry_1 }
            if = {
                limit = {
                    owner = {
                        country_uses_consumer_goods = yes
                    }
                }
                adding_district_zone_or_building = { DISTRICT = district_giga_frameworld_urban_02 ZONE = district_giga_frameworld_factory BUILDING = building_factory_1 }
            }
            else = {
                adding_district_zone_or_building = { DISTRICT = district_giga_frameworld_urban_02 ZONE = district_giga_frameworld_city BUILDING = building_factory_1 }
            }
            adding_district_zone_or_building = { DISTRICT = district_giga_frameworld_urban_03 ZONE = district_giga_frameworld_generator BUILDING = building_foundry_1 }
            adding_district_zone_or_building = { DISTRICT = district_giga_frameworld_urban_04 ZONE = district_giga_frameworld_mining BUILDING = building_foundry_1 }
            if = {
                limit = {
                    owner = {
                        country_uses_food = yes
                    }
                }
                adding_district_zone_or_building = { DISTRICT = district_giga_frameworld_urban_05 ZONE = district_giga_frameworld_farming BUILDING = building_foundry_1 }
            }
            else = {
                adding_district_zone_or_building = { DISTRICT = district_giga_frameworld_urban_05 ZONE = district_giga_frameworld_city BUILDING = building_factory_1 }
            }
            adding_district_zone_or_building = { DISTRICT = district_giga_frameworld_urban_06 ZONE = district_giga_frameworld_administrative BUILDING = building_foundry_1 }
            adding_district_zone_or_building = { DISTRICT = district_giga_frameworld_urban_07 ZONE = district_giga_frameworld_science BUILDING = building_foundry_1 }
            adding_district_zone_or_building = { DISTRICT = district_giga_frameworld_urban_08 ZONE = district_giga_frameworld_amenities BUILDING = building_foundry_1 }
            if = {
                limit = {
                    has_global_flag = giga_buildcap_j
                }
                adding_district_zone_or_building = { DISTRICT = district_giga_frameworld_urban_09 ZONE = district_giga_frameworld_supertensiles BUILDING = building_foundry_1 }
            }
            else = {
                adding_district_zone_or_building = { DISTRICT = district_giga_frameworld_urban_09 ZONE = district_giga_frameworld_trade BUILDING = building_foundry_1 }
            }
            # city
            # while = {
            #     limit = {
            #         has_district = district_city
            #     }
            #     add_district = district_giga_frameworld_city
            #     remove_district = district_city
            # }
            # # hive
            # while = {
            #     limit = {
            #         has_district = district_hive
            #     }
            #     add_district = district_giga_frameworld_hive
            #     remove_district = district_hive
            # }
            # # nexus
            # while = {
            #     limit = {
            #         has_district = district_nexus
            #     }
            #     add_district = district_giga_frameworld_nexus
            #     remove_district = district_nexus
            # }
            #
            # # industrial
            # while = {
            #     limit = {
            #         has_district = district_industrial
            #     }
            #     if = {
            #         # alternate factory-foundry for normal empires
            #         limit = {
            #             owner = {
            #                 or = {
            #                     is_gestalt = no
            #                     has_civic = civic_machine_obsessional_directive
            #                     has_civic = civic_machine_servitor
            #                 }
            #             }
            #         }
            #         if = {
            #             limit = { not = { has_planet_flag = foundry_next }}
            #             add_district = district_giga_frameworld_factory
            #             set_planet_flag = foundry_next
            #         }
            #         else = {
            #             add_district = district_giga_frameworld_foundry
            #             remove_planet_flag = foundry_next
            #         }
            #     }
            #     else = {
            #         # all foundry for gestalts, servitor can rely on their starting sanctuary
            #         add_district = district_giga_frameworld_foundry
            #     }
            #     remove_district = district_industrial
            # }
            # remove_planet_flag = foundry_next
            #
            # # energy
            # while = {
            #     limit = {
            #         has_district = district_generator
            #     }
            #     add_district = district_giga_frameworld_generator
            #     remove_district = district_generator
            # }
            #
            # # mining
            # while = {
            #     limit = {
            #         has_district = district_mining
            #     }
            #     add_district = district_giga_frameworld_mining
            #     remove_district = district_mining
            # }
            #
            # # food
            # while = {
            #     limit = {
            #         has_district = district_farming
            #     }
            #     add_district = district_giga_frameworld_farming
            #     remove_district = district_farming
            # }
            #####
            remove_modifier = frameworld_building_wreck_fix
            #
            # # get rid of any bad districts or buildings which can't be supported
            # validate_planet_buildings_and_districts = yes
            #
            # # fix unemployed pops from the initial district shuffle
            # every_owned_pop = {
            #     limit = {
            #         is_unemployed = yes
            #     }
            #     clear_pop_category = yes
            # }
            check_planet_employment = yes

            # set the maintenance mod on
            giga_frameworld_apply_expanded_maintenance_modifier = yes

            #lyra do my set setup values popup first then use those values
            owner = {
                country_event = {
                    id = fwt.121
                }
            }
            planet_event = {
                id = giga_frameworld_origin.0001
                days = 1
            }
            # # set up extra growth mechanics
            # giga_extra_growth_setup = yes
        }
    }
}

planet_event = {
    id = giga_frameworld_origin.0001
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        add_district = district_giga_frameworld_urban_01
        add_zone = {
            district = district_giga_frameworld_urban_01
            zone = zone_giga_frameworld_foundry
            zone_slot = 0
            replace = no
        }
        # #machines need extra alloys for assembly
        # if = {
        #     limit = {
        #         owner = {
        #             or = {
        #                 is_robot_empire = yes
        #                 is_machine_empire = yes
        #                 is_individual_machine = yes
        #             }
        #         }
        #     }
        #     add_district = district_giga_frameworld_foundry
        # }
        # # extra food for catalytic
        # if = {
        #     limit = {
        #         num_districts = {
        #             type = district_giga_frameworld_generator
        #             value >= 2
        #         }
        #         not = {
        #             owner = {
        #                 has_civic = civic_catalytic_processing
        #             }
        #         }
        #     }
        #     add_district = district_giga_frameworld_mining
        #     remove_district = district_giga_frameworld_generator
        # }
        # else_if = {
        #     limit = {
        #         num_districts = {
        #             type = district_giga_frameworld_generator
        #             value >= 2
        #         }
        #         owner = {
        #             has_civic = civic_catalytic_processing
        #         }
        #     }
        #     add_district = district_giga_frameworld_farming
        #     remove_district = district_giga_frameworld_generator
        # }
        # #some last tweaks to make starting numbers more even
        # if = {
        #     limit = {
        #         has_building = building_commercial_zone
        #     }
        #     remove_building = building_commercial_zone
        #     add_building = building_foundry_1
        # }
        # get rid of any bad districts or buildings which can't be supported
        validate_planet_buildings_and_districts = yes

        # # fix unemployed pops from the initial district shuffle
        # every_owned_pop = {
        #     limit = {
        #         is_unemployed = yes
        #     }
        #     clear_pop_category = yes
        # }
        check_planet_employment = yes
    }
}