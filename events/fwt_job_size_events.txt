# namespace = fwt_jobs
#
# #planet
# #once a month purge "unemployed" pops and make them into a var
# country_event = {
#     id = fwt_jobs.1
#     hide_window = yes
#     is_triggered_only = yes
#
#     trigger = {
#         giga_has_frameworld_origin = yes
#     }
#     immediate = {
#         event_target:frame_expand@owner = {
#             #delayed by 1 day to allow for pops to grow and unemployed
#             planet_event = {
#                 id = fwt_jobs.11
#                 days = 1
#             }
#         }
#     }
# }
#
# #planet
# #track district mult
# planet_event = {
#     id = fwt_jobs.11
#     hide_window = yes
#     is_triggered_only = yes
#
#     trigger = {
#         giga_is_frame_world = yes
#         not = {
#             has_global_flag = stellarisevolved
#         }
#     }
#     immediate = {
#         # if the background pops are greater than the number of jobs for them allow 1 pop to be unemployed before being deleted to show the player that they would be out of jobs
#         if = {
#             limit = { check_variable = { which = background_pops value >= fwt_district_job_count } }
#             set_variable = { which = fwt_maintenance_count value = 1 }
#         }
#         else = {
#             set_variable = { which = fwt_maintenance_count value = 0 }
#         }
#         #get a pop to spawn from
#         if = {
#             limit = {
#                 nand = {
#                     exists = event_target:fwt_growth_@planet
#                     event_target:fwt_growth_@planet = {
#                         is_scope_type = pop
#                         is_same_species = owner_main_species
#                     }
#                 }
#             }
#             random_owned_pop = {
#                 limit = {
#                     is_same_species = owner_main_species
#                 }
#                 save_global_event_target_as = fwt_growth_@planet
#             }
#         }
#         if = {
#             limit = {
#                 check_variable = { which = fwt_maintenance_count value = 1 }
#             }
#             # remove/spawn pop to meet maintenance counts, combos with next event
#             if = {
#                 limit = {
#                     num_unemployed > 1
#                 }
#                 every_owned_pop = {
#                     limit = {
#                         is_unemployed = yes
#                     }
#                     planet = {
#                         change_variable = { which = background_pops value = 1 }
#                     }
#                     kill_pop = yes
#                 }
#                 #check incase the pop has been killed
#                 if = {
#                     limit = {
#                         exists = event_target:fwt_growth_@planet
#                         event_target:fwt_growth_@planet = {
#                             is_scope_type = pop
#                             is_same_species = owner_main_species
#                         }
#                     }
#                 }
#                 else = {
#                     random_owned_pop = {
#                         limit = { is_same_species = owner_main_species }
#                         save_global_event_target_as = fwt_growth_@planet
#                     }
#                 }
#                 create_pop = {
#                     species = event_target:fwt_growth_@planet
#                     ethos = random
#                 }
#                 change_variable = { which = background_pops value = -1 }
#             }
#             if = {
#                 limit = {
#                     num_unemployed = 0
#                 }
#                 #check incase the pop has been killed
#                 if = {
#                     limit = {
#                         exists = event_target:fwt_growth_@planet
#                         event_target:fwt_growth_@planet = {
#                             is_scope_type = pop
#                             is_same_species = owner_main_species
#                         }
#                     }
#                 }
#                 else = { random_owned_pop = {
#                     limit = { is_same_species = owner_main_species }
#                     save_global_event_target_as = fwt_growth_@planet
#                 } }
#                 create_pop = {
#                     species = event_target:fwt_growth_@planet
#                     ethos = random
#                 }
#                 change_variable = { which = background_pops value = -1 }
#             }
#         }
#         else_if = {
#             limit = {
#                 check_variable = { which = fwt_maintenance_count value = 0 }
#             }
#             # one pop will be created and killed each month an extra pop isn't being grown but theres no way to check
#             # free jobs (atleast not ones that aren't disabled)
#             if = {
#                 limit = {
#                     num_unemployed = 0
#                 }
#                 #check incase the pop has been killed
#                 if = {
#                     limit = {
#                         exists = event_target:fwt_growth_@planet
#                         event_target:fwt_growth_@planet = {
#                             is_scope_type = pop
#                             is_same_species = owner_main_species
#                         }
#                     }
#                 }
#                 else = { random_owned_pop = {
#                     limit = { is_same_species = owner_main_species }
#                     save_global_event_target_as = fwt_growth_@planet
#                 } }
#                 create_pop = {
#                     species = event_target:fwt_growth_@planet
#                     ethos = random
#                 }
#                 change_variable = { which = background_pops value = -1 }
#             }
#             every_owned_pop = {
#                 limit = {
#                     is_unemployed = yes
#                 }
#                 planet = {
#                     change_variable = { which = background_pops value = 1 }
#                 }
#                 kill_pop = yes
#             }
#         }
#     }
# }
#
# #pop
# #kill off exccess pop and add to background - disabled till i can get a fix in - only evolved needs this
# pop_event = {
#     id = fwt_jobs.111
#     hide_window = yes
#     is_triggered_only = yes
#
#     trigger = {
#         planet = {
#             giga_is_frame_world = yes
#         }
#         #allow for y0 pop spawning jank
#         years_passed > 0
#     }
#     immediate = {
#         if = {
#             limit = {
#                 planet = {
#                     check_variable = { which = fwt_maintenance_count value = 1 }
#                     num_unemployed > 1
#                 }
#             }
#             planet = {
#                 change_variable = {
#                     which = background_pops
#                     value = 1
#                 }
#             }
#             # kill_pop = yes
#             set_pop_flag = fwt_kill
#         }
#         else_if = {
#             limit = {
#                 planet = {
#                     check_variable = { which = fwt_maintenance_count value = 0 }
#                     num_unemployed > 0
#                 }
#             }
#             planet = {
#                 change_variable = {
#                     which = background_pops
#                     value = 1
#                 }
#             }
#             set_pop_flag = fwt_kill
#             # kill_pop = yes
#         }
#     }
#     after = {
#         if = {
#             limit = {
#                 not = {
#                     has_pop_flag = fwt_kill
#                 }
#                 #no idea if the pop has a job yet if do apply my bonuses
#                 has_job = yes
#                 fwt_job_blacklist = no
#             }
#             # pop_event = {
#             #     id = fwt_jobs.311
#             # }
#         }
#         else_if = {
#             limit = {
#                 has_pop_flag = fwt_kill
#             }
#             kill_pop = yes
#         }
#
#     }
# }
#
#
# # job scaling events #
# country_event = {
#     id = fwt_jobs.3
#     hide_window = yes
#     is_triggered_only = yes
#
#     trigger = {
#         giga_has_frameworld_origin = yes
#     }
#     immediate = {
#         event_target:frame_expand@owner = {
#             #updates 2 days after first of the month tick so the modifier runs out the day before the update loop but
#             # still after the month tick
#             # change how often the event is triggered as the game goes on reduce the frequency to reduce update lag
#             if = {
#                 limit = {
#                     years_passed < 40
#                 }
#                 set_variable = { which = fwt_event_time value = 29 }
#                 planet_event = { id = fwt_jobs.31 days = 3 }
#             }
#             #3x less
#             else_if = {
#                 limit = {
#                     years_passed >= 40
#                     years_passed < 80
#                     not = {
#                         has_planet_flag = fwt_event_lockout
#                     }
#                 }
#                 set_timed_planet_flag = { flag = fwt_event_lockout days = 89 }
#                 set_variable = { which = fwt_event_time value = 89 }
#                 planet_event = { id = fwt_jobs.31 days = 3 }
#             }
#             #6x less
#             else_if = {
#                 limit = {
#                     years_passed >= 80
#                     not = {
#                         has_planet_flag = fwt_event_lockout
#                     }
#                 }
#                 set_timed_planet_flag = { flag = fwt_event_lockout days = 179 }
#                 set_variable = { which = fwt_event_time value = 179 }
#                 planet_event = { id = fwt_jobs.31 days = 3 }
#             }
#         }
#     }
# }
#
# planet_event = {
#     id = fwt_jobs.31
#     hide_window = yes
#     is_triggered_only = yes
#
#     immediate = {
#         set_variable = { which = fwt_planet_job_size value = value:fwt_planet_job_size }
#         set_variable = { which = fwt_district_job_count value = value:fwt_district_job_count }
#
#         if = {
#             limit = {
#                 has_stellaris_evolved = yes
#             }
#
#             if = {
#                 limit = {
#                     exists = event_target:fwt_budding_pop@planet
#                     event_target:fwt_budding_job@planet = {
#                         is_scope_type = pop
#                         is_same_species = owner_main_species
#                     }
#                 }
#                 event_target:fwt_budding_job@planet = {
#                     # Per pop
#                     # Construction
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_building_build_speed_mult_per_pop }
#                     # Pop output
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_psionic_jobs_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_perfect_planet_jobs_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_robotic_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_energy_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_minerals_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_food_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_researcher_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_researcher_upkeep_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_administrators_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_administrators_upkeep_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_pop_assembly_organic_add_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_pop_assembly_add_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_pop_growth_speed_per_pop }
#                     if = {
#                         limit = {
#                             has_trait = trait_tec_replicant_universal
#                             exists = owner
#                             owner = {
#                                 has_country_flag = tec_replicant_upgraded
#                             }
#                         }
#                         owner = {
#                             set_variable = { which = fwt_replicant_universal_mult_var value = 0.0025 }
#                             multiply_variable = { which = fwt_replicant_universal_mult_var value = background_pops }
#                         }
#                     }
#                     # /
#                     # Other
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_stability_add_per_pop }
#                     # /
#                     # Noxious
#                     fwt_pop_non_resource_mod = { MODIFIER = pop_non_noxious_happiness }
#                     # /
#                     # Robotic Noxious
#                     fwt_pop_non_resource_mod = { MODIFIER = pop_amenities_usage_mult }
#                     # /
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_pop_upkeep_base_add }
#                 }
#             }
#             else = {
#                 random_owned_pop = {
#                     limit = {
#                         is_scope_type = pop
#                         is_same_species = owner_main_species
#                     }
#                     save_global_event_target_as = fwt_budding_job@planet
#                     # Per pop
#                     # Construction
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_building_build_speed_mult_per_pop }
#                     # Pop output
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_psionic_jobs_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_perfect_planet_jobs_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_robotic_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_energy_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_minerals_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_food_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_researcher_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_researcher_upkeep_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_administrators_produces_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_jobs_administrators_upkeep_mult_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_pop_assembly_organic_add_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_pop_assembly_add_per_pop }
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_pop_growth_speed_per_pop }
#                     if = {
#                         limit = {
#                             has_trait = trait_tec_replicant_universal
#                             exists = owner
#                             owner = {
#                                 has_country_flag = tec_replicant_upgraded
#                             }
#                         }
#                         owner = {
#                             set_variable = { which = fwt_replicant_universal_mult_var value = 0.0025 }
#                             multiply_variable = { which = fwt_replicant_universal_mult_var value = background_pops }
#                         }
#                     }
#                     # /
#                     # Other
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_planet_stability_add_per_pop }
#                     # /
#                     # Noxious
#                     fwt_pop_non_resource_mod = { MODIFIER = pop_non_noxious_happiness }
#                     # /
#                     # Robotic Noxious
#                     fwt_pop_non_resource_mod = { MODIFIER = pop_amenities_usage_mult }
#                     # /
#                     fwt_pop_non_resource_mod = { MODIFIER = tec_pop_upkeep_base_add }
#                 }
#             }
#         }
#         else = {
#             if = {
#                 limit = {
#                     exists = event_target:fwt_budding_pop@planet
#                     event_target:fwt_budding_job@planet = {
#                         is_scope_type = pop
#                         is_same_species = owner_main_species
#                         or = {
#                             can_assemble_budding_pop = yes
#                             can_assemble_tiyanki_pop = yes
#                         }
#                     }
#                 }
#                 event_target:fwt_budding_job@planet = {
#                     #can be extended in future if i want to write better compat
#                     if = {
#                         limit = {
#                             has_budding_trait = yes
#                         }
#                         planet = { set_variable = { which = fwt_budding_multiplier value = value:budding_multiplier
#                         } }
#                     }
#                     else_if = {
#                         limit = {
#                             has_trait = trait_tiyanki
#                         }
#                         planet = { set_variable = { which = fwt_budding_multiplier value = @tiyanki_budding_rate } }
#                     }
#                 }
#
#             }
#             else = {
#                 random_owned_pop = {
#                     limit = {
#                         is_scope_type = pop
#                         is_same_species = owner_main_species
#                         or = {
#                             can_assemble_budding_pop = yes
#                             can_assemble_tiyanki_pop = yes
#                         }
#                     }
#                     save_global_event_target_as = fwt_budding_job@planet
#                     if = {
#                         limit = {
#                             has_budding_trait = yes
#                         }
#                         planet = { set_variable = { which = fwt_budding_multiplier value = value:budding_multiplier
#                         } }
#                     }
#                     else_if = {
#                         limit = {
#                             has_trait = trait_tiyanki
#                         }
#                         planet = { set_variable = { which = fwt_budding_multiplier value = @tiyanki_budding_rate } }
#                     }
#                 }
#             }
#         }
#
#         set_variable = { which = fwt_budding_mult value = fwt_budding_multiplier }
#         multiply_variable = { which = fwt_budding_mult value = background_pops }
#
#         random_owned_pop = {
#             limit = {
#                 owner_main_species = {
#                     is_same_species = prev
#                 }
#             }
#             planet = {
#                 fwt_get_bonus_param = { MODIFIER = planet_jobs_upkeep_mult }
#                 fwt_get_bonus_param = { MODIFIER = planet_jobs_productive_upkeep_mult }
#                 ########## modifiers that can be increased with script values ########
#
#                 set_variable = { which = fwt_species_empire_size_var value = modifier:species_empire_size_mult }
#                 subtract_variable = { which = fwt_species_empire_size_var value =  modifier:species_empire_size_mult_offset }
#                 change_variable = { which = fwt_species_empire_size_var value = 1 }
#                 multiply_variable = { which = fwt_species_empire_size_var value = fwt_planet_job_size }
#                 remove_modifier = fwt_species_empire_size_job_mult
#
#                 set_variable = { which = fwt_political_power_var value = prev.modifier:pop_political_power }
#                 change_variable = { which = fwt_political_power_var value = 1 }
#                 multiply_variable = { which = fwt_political_power_var value = fwt_planet_job_size }
#
#                 set_variable = { which = fwt_planet_jobs_upkeep_mult_var value = prev.modifier:planet_jobs_upkeep_mult }
#                 change_variable = { which = fwt_planet_jobs_upkeep_mult_var value = 1 }
#                 multiply_variable = { which = fwt_planet_jobs_upkeep_mult_var value = fwt_planet_job_size }
#
#                 if = {
#                     limit = {
#                         num_assigned_jobs = { job = ds_cyberpunk_arasaka value > 0 }
#                     }
#                     set_variable = { which = fwt_pop_category_specialists_unity_produces_mult_var value = prev.modifier:pop_category_specialists_unity_produces_mult }
#                     change_variable = { which = fwt_pop_category_specialists_unity_produces_mult_var value = 1 }
#                     multiply_variable = { which = fwt_pop_category_specialists_unity_produces_mult_var value = fwt_planet_job_size }
#                 }
#                 else = {
#                     clear_variable = fwt_pop_category_specialists_unity_produces_mult_var
#                 }
#             }
#         }
#         #tracks how many pop got bonuses to workout the ratios
#         set_variable = { which = fwt_scaled_pop value = 0 }
#         # has to be pre looped so the full value is avail on loop start
#         every_owned_pop = {
#             limit = { fwt_job_blacklist = no }
#             planet = {
#                 change_variable = { which = fwt_scaled_pop value = 1 }
#             }
#         }
#
#         # big every pop loop
#         # each scripted effect if its not set calcs the modifiers for the month
#         # if the value is greater than 0 check if the job is working a job that benefits from that bonus, if so add the modifier to the pop
#         every_owned_pop = {
#             limit = {
#                 fwt_job_blacklist = no
#             }
#             pop_event = {
#                 id = fwt_jobs.311
#             }
#         }
#
#         # event tweaks
#         # fix for solar storms unity/trade from pops
#         # get job size as a mult
#         if = {
#             limit = {
#                 has_global_flag = ss_solar_storm_installed
#                 is_variable_set = ss_establishment_num_planet
#             }
#             set_variable = { which = ss_fwt_planet_job_size value = fwt_planet_job_size }
#             change_variable = { which = ss_fwt_planet_job_size value = 1 }
#             multiply_variable = { which = ss_establishment_num_planet value = ss_fwt_planet_job_size }
#             owner = {
#                 multiply_variable = { which = ss_establishment_num value = prev.ss_fwt_planet_job_size }
#             }
#         }
#     }
# }
#
# pop_event = {
#     id = fwt_jobs.311
#     hide_window = yes
#     is_triggered_only = yes
#
#
#     immediate = {
#         ########## pop scaling ##################
#         add_modifier = {
#             modifier = fwt_species_empire_size_job_mult
#             multiplier = planet.fwt_species_empire_size_var
#         }
#         add_modifier = {
#             modifier = fwt_jobs_productive_upkeep_job_mult
#             multiplier = planet.fwt_planet_job_size
#             days = 1
#             time_multiplier = planet.fwt_event_time
#         }
#         add_modifier = {
#             modifier = fwt_pop_political_power_job_mult
#             multiplier = planet.fwt_political_power_var
#             days = 1
#             time_multiplier = planet.fwt_event_time
#         }
#         #temp fix, add proper variables back at some point
#         add_modifier = {
#             modifier = fwt_pop_lifestyle_trade_value_job_mult
#             multiplier = planet.fwt_planet_job_size
#             days = 1
#             time_multiplier = planet.fwt_event_time
#         }
#         if = {
#             limit = {
#                 planet = {
#                     is_variable_set = fwt_pop_category_specialists_unity_produces_mult_var
#                 }
#             }
#             add_modifier = {
#                 modifier = fwt_pop_category_specialists_unity_produces_mult
#                 multiplier = planet.fwt_pop_category_specialists_unity_produces_mult_var
#                 days = 1
#                 time_multiplier = planet.fwt_event_time
#             }
#         }
#         if = {
#             limit = {
#                 fwt_trade_job_check = yes
#             }
#             add_modifier = {
#                 modifier = fwt_pop_job_trade_job_mult
#                 multiplier = planet.fwt_planet_job_size
#                 days = 1
#                 time_multiplier = planet.fwt_event_time
#             }
#         }
#         #incase i want to add support for jobs that aren't counted as productive but outputs are scaled and so
#         # should the upkeep
#         if = {
#             limit = {
#                 fwt_non_productive_job = yes
#             }
#             add_modifier = {
#                 modifier = fwt_jobs_upkeep_job_mult
#                 multiplier = planet.fwt_planet_jobs_upkeep_mult_var
#                 days = 1
#                 time_multiplier = planet.fwt_event_time
#             }
#         }
#
#         # once per year bc check_economic_production_modifier_for_job has a noticeable lag to it
#         # JOB should be the job cat,  JOB_NAME is the non-gestalt empires job of that type, PRODUCTION(1,2,3,4) is the different output a job can have (researchers), UPKEEP(1,2,3,4) is the same but for upkeep's e.g. metallurgists
#         fwt_job_output_scale = { JOB = metallurgists JOB_NAME = foundry PRODUCTION1 = alloys UPKEEP1 = minerals UPKEEP2 = food UPKEEP3 = energy }
#         fwt_job_output_scale = { JOB = researchers JOB_NAME = researcher PRODUCTION1 = physics_research PRODUCTION2 = society_research PRODUCTION3 = engineering_research UPKEEP1 = consumer_goods UPKEEP2 = minerals UPKEEP3 = energy }
#         fwt_job_output_scale = { JOB = artisans JOB_NAME = artisan PRODUCTION1 = consumer_goods UPKEEP1 = minerals UPKEEP2 = food }
#         # to fix
#         fwt_job_output_scale = { JOB = administrators JOB_NAME = bureaucrat PRODUCTION1 = unity UPKEEP1 = consumer_goods UPKEEP2 = food UPKEEP3 = minerals UPKEEP4 = energy }
#         fwt_job_output_scale = { JOB = technician JOB_NAME = technician PRODUCTION1 = energy UPKEEP1 = energy }
#         fwt_job_output_scale = { JOB = miners JOB_NAME = miner PRODUCTION1 = minerals UPKEEP1 = energy }
#         fwt_job_output_scale = { JOB = farmers JOB_NAME = farmer PRODUCTION1 = food UPKEEP1 = energy }
#         fwt_job_output_scale = { JOB = livestock JOB_NAME = livestock PRODUCTION1 = food PRODUCTION1 = minerals }
#         fwt_job_output_scale = { JOB = chemists JOB_NAME = chemist PRODUCTION1 = volatile_motes UPKEEP1 = minerals UPKEEP2 = food }
#         fwt_job_output_scale = { JOB = translucers JOB_NAME = translucer PRODUCTION1 = rare_crystals UPKEEP1 = minerals UPKEEP2 = food }
#         fwt_job_output_scale = { JOB = refiners  JOB_NAME = gas_refiner PRODUCTION1 = exotic_gases UPKEEP1 = minerals UPKEEP2 = food }
#
#         ########### bonuses for job that inherit from a normal jobs eco cat e.g priests from bureaucrats
#
#         fwt_job_output_bonus_param = { JOB_CAT = priests PRODUCTION = unity ECO_CAT = administrators TYPE = mult }
#         # fwt_job_output_bonus_param = { JOB_CAT = culture_workers PRODUCTION = unity  ECO_CAT = administrators TYPE = mult }
#         fwt_job_output_bonus_param = { JOB_CAT = evaluators PRODUCTION = unity ECO_CAT = administrators TYPE = mult }
#         # fwt_job_output_bonus_param = { JOB_CAT = nobles PRODUCTION = unity ECO_CAT = politicians TYPE = mult }
#         # fwt_job_output_bonus_param = { JOB_CAT = executives PRODUCTION = unity ECO_CAT = politicians TYPE = mult }
#         fwt_job_output_bonus_param = { JOB_CAT = bio_trophies PRODUCTION = unity ECO_CAT = culture_workers TYPE = mult }
#
#         # same as above but for jobs that are adding extra output that the job doesn't have normally e.g. unity from researchers or engineering from priests
#         fwt_job_output_bonus_param = { JOB_CAT = priests ECO_CAT = priests PRODUCTION = engineering_research TYPE = add }
#         fwt_job_output_bonus_param = { JOB_CAT = farmers  ECO_CAT = farmers PRODUCTION = consumer_goods TYPE = add }
#         fwt_job_output_bonus_param = { JOB_CAT = farmers ECO_CAT = farmers PRODUCTION = energy TYPE = add }
#         fwt_job_output_bonus_param = { JOB_CAT = farmers ECO_CAT = farmers PRODUCTION = exotic_gases TYPE = add }
#         fwt_job_output_bonus_param = { JOB_CAT = farmers ECO_CAT = farmers PRODUCTION = minerals TYPE = add }
#         fwt_job_output_bonus_param = { JOB_CAT = farmers ECO_CAT = farmers PRODUCTION = unity TYPE = add }
#         fwt_job_output_bonus_param = { JOB_CAT = researchers ECO_CAT = researchers PRODUCTION = unity TYPE = add }
#         fwt_job_output_bonus_param = { JOB_CAT = metallurgists ECO_CAT = metallurgists PRODUCTION = unity TYPE = add }
#
#         ########### upkeep's ################
#
#         fwt_set_job_size_variable_params = { MODIFIER = planet_evaluators_energy_upkeep }
#         fwt_set_job_size_variable_params = { MODIFIER = planet_priests_consumer_goods_upkeep_mult }
#         fwt_set_job_size_variable_params = { MODIFIER = planet_bio_trophies_consumer_goods_upkeep }
#     }
# }
