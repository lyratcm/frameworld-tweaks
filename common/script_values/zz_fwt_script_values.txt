fwt_decision_time = {
    base = 100
	# no idea why script values are failing
	#maybe its bc you scoped to a owner variable while in situation
	divide = value:fwt_decision_time_2
}

fwt_decision_time_2 = {
    weight = fwt_decision_time
	# no idea why script values are failing
	divide = 30
}
#pretty sure theres base game version but im too lazy to find it
fwt_mult_bonus_to_dec_mult = {
	base = 1
	add = modifier:$MODIFIER$
}

fwt_situation_decision_cost_time = {
	base = 100
	# no idea why script values are failing - lyra
	#maybe its bc you scoped to a owner variable while in situation - also lyra
	divide = value:fwt_situation_decision_cost_time_month
	#frame_expand@owner is that empires frame world
}

fwt_situation_decision_cost_time_month = {
	weight = fwt_decision_time
	divide = 30
}

####### auto-expansion ######################

#noinspection SpellCheckingInspection
fwt_situation_continuous_speed = {
	weight = owner.modifier:country_situations_expansion_alloys_upkeep_add
	# add = owner.modifier:fwt_alloy_useage_offset
	divide = value:fwt_situation_continuous_cost1
	mult = 100
}

fwt_situation_continuous_cost2 = {
	#make sure to update this to match any new base cost changes
	base = @giga_frameworld_expansion_cost_base
	modifier = {
		add = @giga_frameworld_expansion_cost_habitat_2
		owner = { has_technology = tech_habitat_2 }
	}
	modifier = {
		add = @giga_frameworld_expansion_cost_habitat_3
		owner = { has_technology = tech_habitat_3 }
	}
	# modifier = {
	# 	add = @fwt_frameworld_expansion_cost_starbase_2
	# 	owner = { has_technology = tech_starbase_2 }
	# }
	modifier = {
		add = @fwt_frameworld_expansion_cost_starbase_3
		owner = { has_technology = tech_starbase_3}
	}
	modifier = {
		add = @fwt_frameworld_expansion_cost_starbase_4
		owner = { has_technology = tech_starbase_4 }
	}
	modifier = {
		add = @fwt_frameworld_expansion_cost_starbase_5
		owner = { has_technology = tech_starbase_5 }
	}
	modifier = {
		add = @fwt_frameworld_expansion_cost_megashipyard
		owner = { has_technology = tech_mega_shipyard }
	}
}

fwt_situation_continuous_cost1 = {
	weight = value:fwt_situation_continuous_cost2
	# multiplier for how many expansions
	mult = event_target:frame_expand@owner.giga_frameworld_expansion_cost_multiplier
}

#% of income spending as a %
fwt_situation_continuous_pol_speed = {
	weight = fwt_expansion_income
	divide = 100
}

#amount of income spent
fwt_situation_continuous_postive_expense = {
	base = 0
	#alloy upkeep
	complex_trigger_modifier = {
		trigger = resource_expenses_compare
		trigger_scope = owner 
		parameters = {
			resource = alloys
			value = 0
		}
		mode = set
	}
	#remove alloy spent on situation
	subtract = owner.modifier:country_situations_expansion_alloys_upkeep_add
}

#amount of income spent
fwt_situation_continuous_postive_revenue = {
	base = 0
	#alloys produced
	complex_trigger_modifier = {
		trigger = resource_revenue_compare
		trigger_scope = owner 
		parameters = {
			resource = alloys
			value = 0
		}
		mode = set
	}
}


################ end situation early calcs #######################
fwt_situation_end_less_than_month = {
	base = 100
	#5
	subtract = trigger:situation_monthly_progress
	#95
}

fwt_situation_end_days_left = {
	base = 100
	#80
	#20
	subtract = trigger:situation_progress
	#35
	#0.57
	divide = trigger:situation_monthly_progress
	#17
	multiply = 30
}

########################total growth on planet#########################
#currently unused due to pop growth tracking being impossible
fwt_total_growth = {
	base = 0
	add = modifier:logistic_growth_mult
	# divide = value:fwt_total_growth_reduction
	# complex_trigger_modifier = {
	# 	trigger = check_galaxy_setup_value
	# 	mode = set
	# 	parameters = {
	#
	# 	}
	# }
}

fwt_total_assembly = {
	base = 0
	add = modifier:planet_pop_assembly_add
	mult = modifier:planet_pop_assembly_mult
	divide = value:fwt_total_assembly_reduction
}

fwt_total_assembly_reduction = {
	base = 0
	add = modifier:planet_pop_assembly_reduction
	modifier = {
		add = 1
		check_modifier_value = {
			modifier = planet_pop_assembly_reduction
			value > 0
		}
	}
	modifier = {
		subtract = 1
		check_modifier_value = {
			modifier = planet_pop_assembly_reduction
			value < 0
		}
	}
}

fwt_total_assembly_organic = {
	base = 0
	add = modifier:bonus_pop_growth
	add = modifier:bonus_pop_growth_mult
}

#frameworld support
fwt_total_secondary_growth = {
	base = 0
	add = total_growth
}

fwt_total_pop_gain = {
	base = 0
	modifier = {
		add = value:fwt_total_assembly
		or = {
			is_synthetic_empire = yes
			is_cyborg_empire = yes
		}
	}
	modifier = {
		add = value:fwt_total_assembly_organic
		nor = {
			is_synthetic_empire = yes
			is_cyborg_empire = yes
		}
	}
	add = value:fwt_total_growth
	add = value:fwt_total_secondary_growth
}

fwt_total_pops_trigger = {
	base = 0
	add = trigger:num_organic_pops_per_year
	add = trigger:num_artificial_pops_per_year
	add = total_growth
	divide = 12
}


# #### expansion scaling ########
# fwt_expansion_build_scaling = {
# 	weight = giga_frameworld_expansions
# 	multiply = value:fwt_expansion_mult
# }
#
# fwt_expansion_mult = {
# 	weight = giga_frameworld_expansions
# 	divide = value:fwt_expansion_mult_reduction
# 	add = 1
# }
# # base is 1/20th but increase that as you expand more
# # still need to make this scale worst
# #maybe its fine with new scaling
# fwt_expansion_mult_reduction = {
# 	weight = giga_frameworld_expansions
# 	divide = 5
# 	add = 20
# }

##### maintenance job switches #############
giga_frameworld_expanded_maintenance_multiplier = {
	base = 0

	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				is_unemployed = yes
				nor = {
					has_virtual_species_trait = yes
					has_living_standard = { type = living_standard_organic_trophy }
				}
			}
		}
		mode = add
	}
	
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = frame_maintenance_worker
		}
		mode = add
	}

	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = frame_maintenance_drone
		}
		mode = add
	}


	subtract = owner.fwt_maintenance_count
	min = 0
	# complex_trigger_modifier = {
	# 	trigger = num_assigned_jobs
	# 	parameters = {
	# 		job = frame_maintenance_worker_alloy
	# 	}
	# 	mode = add
	# }
	# complex_trigger_modifier = {
	# 	trigger = num_assigned_jobs
	# 	parameters = {
	# 		job = frame_maintenance_worker_research
	# 	}
	# 	mode = add
	# }
	# complex_trigger_modifier = {
	# 	trigger = num_assigned_jobs
	# 	parameters = {
	# 		job = frame_maintenance_worker_unity
	# 	}
	# 	mode = add
	# }
	# complex_trigger_modifier = {
	# 	trigger = num_assigned_jobs
	# 	parameters = {
	# 		job = frame_maintenance_drone_alloy
	# 	}
	# 	mode = add
	# }
	# complex_trigger_modifier = {
	# 	trigger = num_assigned_jobs
	# 	parameters = {
	# 		job = frame_maintenance_drone_research
	# 	}
	# 	mode = add
	# }
	# complex_trigger_modifier = {
	# 	trigger = num_assigned_jobs
	# 	parameters = {
	# 		job = frame_maintenance_drone_unity
	# 	}
	# 	mode = add
	# }
}

##### auto_harvest ########
fwt_auto_harvest_speed = {
	weight = 1
	add = owner.modifier:megastructure_build_speed_mult
}

#useing this as a parentheses
fwt_modifier_bonuses_params_add_parentheses = {
	# add base extra from modifiers
	weight = planet.modifier:$MODIFIER$_add
	# removes the bonus from the deposit so it doesn't stack with it self
	subtract = planet.modifier:$MODIFIER$_add_offset
}

fwt_modifier_bonuses_params_add = {
	weight = value:fwt_modifier_bonuses_params_add_parentheses|MODIFIER|$MODIFIER$|
	#scale it to any planet size bonuses gigas had added
	mult = fwt_planet_job_size
}

fwt_modifier_bonuses_params_mult_parentheses = {
	# add base extra from modifiers
	weight = planet.modifier:$MODIFIER$_mult
	# removes the bonus from the deposit so it doesn't stack with it self
	subtract = planet.modifier:$MODIFIER$_mult_offset
	# add base extra from generic output
	add = planet.modifier:planet_jobs_$PRODUCTION$_mult
	add = planet.modifier:planet_jobs_$STRATA$_$PRODUCTION$_mult
}

fwt_modifier_bonuses_params_mult = {
	weight = value:fwt_modifier_bonuses_params_mult_parentheses|MODIFIER|$MODIFIER$|STRATA|$STRATA$|PRODUCTION|$PRODUCTION$|
	#scale it to any planet size bonuses gigas had added
	mult = fwt_planet_job_size
	# subtract = -1
}

#make is a multiplier
fwt_giga_planet_job_size = {
	weight = planet.modifier:giga_planet_job_size
	add = 1
}

# pops relative to fake pops for scaling modifiers tied to a pop
fwt_pop_effectivness = {
	weight = trigger:pop_amount
	divide = background_pops
}

fwt_job_base = {
	weight = $BASE$
	mult = fwt_planet_job_size
}

empire_base_param = {
	weight = 1
	add = modifier:$MODIFIER$
}

species_empire_base = {
	weight = owner.fwt_planet_job_size
	mult = value:empire_base_param|MODIFIER|species_empire_size_mult|
}

amenities_empire_base = {
	weight = fwt_planet_job_size
	mult = value:empire_base_param|MODIFIER|pop_amenities_usage_mult|
}

political_power_empire_base_sub = {
	base = 1
	add = modifier:pop_political_power
}

political_power_empire_base = {
	weight = owner.fwt_planet_job_size
	mult = value:political_power_empire_base_sub
}

bb_scripted_modifier_job_weight_mult = {
	base = 1
	add = modifier:$MODIFIER$
	subtract = modifier:$MODIFIER$_offset
	min = 0.1
	pow = 3 #we need it to have a bit more impact
}

fwt_situation_finish_count_sub = {
	weight = trigger:situation_monthly_progress
	modulo = 100
}

fwt_situation_finish_count = {
	weight = trigger:situation_monthly_progress
	subtract = value:fwt_situation_finish_count_sub
	divide = 100
	min = 1
}


#temp till code switch
giga_planet_density_offset_modifier_by_pops = {
	weight = modifier:$modifier$
	subtract = modifier:giga_$modifier$_offset
	[[countCountry]
		modifier = {
			exists = owner
			subtract = owner.modifier:giga_$modifier$_offset
		}
	]
	[[positiveOnly]
		min = 0
	]
	[[negativeOnly]
		max = 0
	]
	multiply = value:giga_planet_density_by_pops|pops|$pops|20000$|
}

fwt_expansion_cost = {
	weight = giga_frameworld_expansion_cost_base
	mult = giga_frameworld_expansion_cost_exponent
}

fwt_city_districts_value = {
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_city
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_hive
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_giga_frameworld_nexus
		}
		mode = add
	}
}



fwt_districts_value = {
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = $DISTRICT$
		}
		mode = add
	}
	mult = fwt_$COMPLETION$_completion
}

######################################################

giga_planet_density_offset_jobs_by_pops = {
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = $job$
		}
		mode = weight
	}
	divide = 100
	multiply = value:giga_planet_density_by_pops|pops|$pops|20000$|
}

giga_planet_density_offset_by_bio_trophies = {
	weight = value:giga_planet_density_count_bio_trophies
	divide = 100
	multiply = value:giga_planet_density_by_pops|pops|$pops|20000$|
}

giga_frameworld_outpost_growth_job_upkeep = {
	base = 1
	[[!checkType]
		complex_trigger_modifier = {
			trigger = num_assigned_jobs
			parameters = {
				job = $job$
			}
			trigger_scope = target
			mode = mult
		}
	]
	[[checkType]
		complex_trigger_modifier = {
			trigger = num_assigned_jobs
			parameters = {
				job = $job$
				value > 0
			}
			trigger_scope = target
			mode = mult
		}
	]
	divide = 100
	mult = value:giga_frameworld_outpost_growth_count
	[[modifier]
		mult = target.value:scripted_modifier_mult|MODIFIER|$modifier$|
	]
}

# number of pops resettled per month to the frameworld
# 5% or 400, whichever is more. Breakpoint is 400 / 0.05 = 8000
giga_frameworld_resettlement_count = {
	weight = trigger:pop_amount
	mult = 0.05
	round = yes
	min = 400
}

