
fwt_set_job_size_variable_params = {
    optimize_memory
    planet = {
        set_variable = { which = fwt_$MODIFIER$_mult_var_sub value = prev.modifier:$MODIFIER$_mult }
        if = {
            #only run if the variable is a value that's not 0 so should be checked
            limit = {
                not = { check_variable = { which = fwt_$MODIFIER$_mult_var_sub value = 0 } }
            }
            planet = {
                subtract_variable = { which = fwt_$MODIFIER$_mult_var_sub value = modifier:$MODIFIER$_mult_offset }
                #account for giga also having modifiers with offsets, my offset is generic to allow compat
                subtract_variable = { which = fwt_$MODIFIER$_var_sub value = modifier:giga_$MODIFIER$_offset }
                multiply_variable = { which = fwt_$MODIFIER$_mult_var_sub value = fwt_planet_job_size }
                set_variable = { which = fwt_$MODIFIER$_mult_var value = fwt_$MODIFIER$_mult_var_sub }
            }
        }
        else = {
            clear_variable = fwt_$MODIFIER$_mult_var_sub
        }
    }
}


#for jobs like administrators where you can get a lot but not from districts (and so out of my normal control)
fwt_half_job_count_params = {
    optimize_memory
    set_variable = { which = fwt_$JOB$_var_sub value = modifier:$JOB$ }
    if = {
        limit = {
            not = { check_variable = { which = fwt_$JOB$_var_sub value = 0 } }
        }
        subtract_variable = { which = fwt_$JOB$_var_sub value = modifier:$JOB$_offset }
        subtract_variable = { which = fwt_$JOB$_var_sub value = modifier:giga_$JOB$_offset }
        divide_variable = { which = fwt_$JOB$_var_sub value = 2 }
        #invert the variable so it removes half instead
        multiply_variable = { which = fwt_$JOB$_var_sub value = -1 }
        #rounds down so it only takes a job when it gets to the full value
        ceiling_variable = fwt_$JOB$_var_sub
        set_variable = { which = fwt_$JOB$_var value = fwt_$JOB$_var_sub }
    }
    else = {
        clear_variable = fwt_$JOB$_mult_var_sub
    }
}

#for modifiers like amenities that have a script value as a mult
fwt_modifier_mult_script_params = {
    optimize_memory
    planet = {
        set_variable = { which = fwt_$MODIFIER$_var_sub value = prev.modifier:$MODIFIER$  }
        if = {
            limit = {
                not = { check_variable = { which = fwt_$MODIFIER$_var_sub value = 0 } }
            }
            # set_variable = { which = fwt_$MODIFIER$_var_sub value = modifier:$MODIFIER$ }
            subtract_variable = { which = fwt_$MODIFIER$_var_sub value = modifier:$MODIFIER$_offset }
            subtract_variable = { which = fwt_$MODIFIER$_var_sub value = modifier:giga_$MODIFIER$_offset }
            multiply_variable = { which = fwt_$MODIFIER$_var_sub value = fwt_planet_job_size }
            set_variable = { which = fwt_$MODIFIER$_var value = fwt_$MODIFIER$_var_sub }
        }
        else = {
            clear_variable = fwt_$MODIFIER$_mult_var_sub
        }
    }
}

#only gets the value of a bonus when its generic
fwt_get_bonus_param = {
    optimize_memory
    planet = {
        set_variable = { which = fwt_$MODIFIER$_var_sub value = prev.modifier:$MODIFIER$ }
        if = {
            limit = {
                not = { check_variable = { which = fwt_$MODIFIER$_var_sub value = 0 } }
            }
            subtract_variable = { which = fwt_$MODIFIER$_var_sub value = modifier:$MODIFIER$_offset }
            #account for gigas scaling
            subtract_variable = { which = fwt_$MODIFIER$_var_sub value = modifier:giga_$MODIFIER$_offset }
            multiply_variable = { which = fwt_$MODIFIER$_var_sub value = fwt_planet_job_size }
            set_variable = { which = fwt_$MODIFIER$_var value = fwt_$MODIFIER$_var_sub }
        }
        else = {
            clear_variable = fwt_$MODIFIER$_mult_var_sub
        }
    }
}

#no need to repeat this
fwt_planet_only_mod_mult_params = {
    optimize_memory
    set_variable = { which = fwt_$MODIFIER$_var_sub value = modifier:$MODIFIER$ }
    #some wierdness that has to be fixed by setting it to itsself
    planet = {
        set_variable = { which = fwt_$MODIFIER$_var_sub value = prev.fwt_$MODIFIER$_var_sub }
        # log = "k\\[[this.fwt_$MODIFIER$_var_sub]]"
        if = {
            limit = {
                not = { check_variable = { which = fwt_$MODIFIER$_var_sub value = 0 } }
            }
            #for things like trade where you can't _add so have to
            subtract_variable = { which = fwt_$MODIFIER$_var_sub value = modifier:$MODIFIER$_offset }
            subtract_variable = { which = fwt_$MODIFIER$_var_sub value = modifier:giga_$MODIFIER$_offset }
            multiply_variable = { which = fwt_$MODIFIER$_var_sub value = fwt_planet_job_size }
            set_variable = { which = fwt_$MODIFIER$_var value = fwt_$MODIFIER$_var_sub }
            #modifiers don't benefit from resources from jobs so need to apply a separate base extra pop output
        }
        else = {
            clear_variable = fwt_$MODIFIER$_mult_var_sub
        }
        set_variable = { which = fwt_$MODIFIER$_var_sub value = 1 }
        multiply_variable = { which = fwt_$MODIFIER$_var_sub value = fwt_planet_job_size }
        log = "k\\[[this.fwt_$MODIFIER$_var_sub]]"
        change_variable = { which = fwt_$MODIFIER$_var value = fwt_$MODIFIER$_var_sub }
    }
}

fwt_job_output_scale_sub = {
    optimize_memory
        # generic modifiers
        # fwt_get_bonus_params = { MODIFIER = planet_jobs_$PRODUCTION$_produces_mult }
        fwt_get_bonus_param = { MODIFIER = planet_jobs_$PRODUCTION$_upkeep_mult }
        # fwt_get_bonus_params = { MODIFIER = planet_jobs_productive_$PRODUCTION$_produces_mult }
        fwt_get_bonus_param = { MODIFIER = planet_jobs_productive_$PRODUCTION$_upkeep_mult }
        # generic bonuses for the job
        # fwt_get_bonus_params = { MODIFIER = planet_$JOB$_produces_mult }
        fwt_get_bonus_param = { MODIFIER = planet_$JOB$_upkeep_mult }
        # production
        # some jobs have multiple alt upkeep/productions see researchers having 3 + 1 for compat
        [[PRODUCTION1]
            fwt_job_output_base_param = { JOB_NAME = $JOB_NAME$ JOB_CAT = $JOB$ PRODUCTION = $PRODUCTION1$ }
            fwt_get_bonus_param = { MODIFIER = planet_jobs_$PRODUCTION1$_upkeep_mult }
        ] [[PRODUCTION2]
            fwt_job_output_base_param = { JOB_NAME = $JOB_NAME$ JOB_CAT = $JOB$ PRODUCTION = $PRODUCTION2$ }
            fwt_get_bonus_param = { MODIFIER = planet_jobs_$PRODUCTION2$_upkeep_mult }
        ] [[PRODUCTION3]
            fwt_job_output_base_param = { JOB_NAME = $JOB_NAME$ JOB_CAT = $JOB$ PRODUCTION = $PRODUCTION3$ }
            fwt_get_bonus_param = { MODIFIER = planet_jobs_$PRODUCTION3$_upkeep_mult }
        ][[PRODUCTION4]
            fwt_job_output_base_param = { JOB_NAME = $JOB_NAME$ JOB_CAT = $JOB$ PRODUCTION = $PRODUCTION4$ }
            fwt_get_bonus_param = { MODIFIER = planet_jobs_$PRODUCTION4$_upkeep_mult }
        ]
        # upkeep
        # 5 bc administrators can have 4 (normal, machine, hive, hive lithoid)
        [[UPKEEP1]
            fwt_set_job_size_variable_params = { MODIFIER = planet_$JOB$_$UPKEEP1$_upkeep }
        ]
        [[UPKEEP2]
            fwt_set_job_size_variable_params = { MODIFIER = planet_$JOB$_$UPKEEP2$_upkeep }
        ]
        [[UPKEEP3]
            fwt_set_job_size_variable_params = { MODIFIER = planet_$JOB$_$UPKEEP3$_upkeep }
        ]
        [[UPKEEP4]
            fwt_set_job_size_variable_params = { MODIFIER = planet_$JOB$_$UPKEEP4$_upkeep }
        ]
        [[UPKEEP5]
            fwt_set_job_size_variable_params = { MODIFIER = planet_$JOB$_$UPKEEP5$_upkeep }
        ]
}
# for modifiers to jobs that already benefit from another jobs modifiers e.g priest and administrators
fwt_job_output_bonus_param_sub = {
    optimize_memory
    if = {
        limit = {
            nand = {
                #only run if the modifier is above or below 0
                check_modifier_value = { modifier = planet_$JOB_CAT$_$PRODUCTION$_produces_$TYPE$ value = 0 }
                check_modifier_value = { modifier = planet_$JOB_CAT$_produces_$TYPE$ value = 0 }
            }
        }
        # get the bonus to the job and type production and add it to the generic jobs mult bonuses for that job
        set_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = modifier:planet_$JOB_CAT$_$PRODUCTION$_produces_mult }
        change_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = modifier:planet_$JOB_CAT$_produces_mult }
        change_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = modifier:planet_$PRODUCTION$_produces_mult_offset }
        planet = {
            set_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var  value = fwt_planet_$ECO_CAT$_$PRODUCTION$_produces_mult_generic_var }
            #swap to planet scope
            change_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = prev.fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var }
            subtract_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = modifier:planet_$JOB_CAT$_produces_mult_offset }
            subtract_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = modifier:planet_$JOB_CAT$_$PRODUCTION$_produces_mult_offset }
            subtract_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = modifier:planet_$PRODUCTION$_produces_mult_offset }
            multiply_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = fwt_planet_job_size }
        }
    }
}


fwt_job_output_bonus_param = {
    optimize_memory
    if = {
        limit = {
            fwt_$JOB_CAT$_job_check = yes
        }
        if = {
            limit = {
                not = {
                    planet = {
                        has_planet_flag = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_flag
                    }
                }
            }
            if = {
                limit = {
                    nand = {
                        #only run if the modifier is above or below 0
                        check_modifier_value = { modifier = planet_$JOB_CAT$_$PRODUCTION$_produces_$TYPE$ value = 0 }
                        check_modifier_value = { modifier = planet_$JOB_CAT$_produces_$TYPE$ value = 0 }
                    }
                }
                # get the bonus to the job and type production and add it to the generic jobs mult bonuses for that job
                set_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = modifier:planet_$JOB_CAT$_$PRODUCTION$_produces_mult }
                change_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = modifier:planet_$JOB_CAT$_produces_mult }
                change_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = modifier:planet_$PRODUCTION$_produces_mult_offset }
                planet = {
                    set_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var  value = fwt_planet_$ECO_CAT$_$PRODUCTION$_produces_mult_generic_var }
                    #swap to planet scope
                    change_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = prev.fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var }
                    subtract_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = modifier:planet_$JOB_CAT$_produces_mult_offset }
                    subtract_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = modifier:planet_$JOB_CAT$_$PRODUCTION$_produces_mult_offset }
                    subtract_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = modifier:planet_$PRODUCTION$_produces_mult_offset }
                    multiply_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = fwt_planet_job_size }
                }
            }
            planet = {
                set_timed_planet_flag = {
                    flag = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_flag
                    days = 360
                }
            }
        }
        if = {
            limit = {
                planet = {
                    not = {
                        check_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = 0 }
                    }
                }
            }
            add_modifier = {
                modifier = fwt_$JOB_CAT$_$PRODUCTION$_produces_job_mult
                multiplier = planet.fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var
                days = 1
                time_multiplier = planet.fwt_event_time
            }
        }
    }
}

fwt_job_output_base_param = {
    optimize_memory
    export_trigger_value_to_variable = {
        trigger = check_economic_production_modifier_for_job
        parameters = {
            #some jobs don't have the same name as their eco cat (looking at your metallurgist/foundry)
            job = $JOB_NAME$
            resource = $PRODUCTION$
            species_modifiers_only = no
            value > 0
        }
        variable = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var
    }
    #for some reason this is needed to scope properly - just jank
    set_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var }
    planet = {
        set_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = prev.fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var }
        # log_error = "1 [this.fwt_planet_farmers_food_produces_mult_var] "
        if = {
            limit = {
                not = {
                    check_variable = {
                        which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var
                        value = 0
                    }
                }
            }
            #use this in other calcs to track how much of the variable is from bonuses to only the the job/output type
            set_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_generic_var value = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var }
            subtract_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_generic_var value = modifier:planet_$JOB_CAT$_$PRODUCTION$_produces_mult }
            subtract_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_generic_var value = modifier:planet_$JOB_CAT$_produces_mult }
            subtract_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_generic_var value = modifier:planet_$PRODUCTION$_produces_mult }

            # account for modifiers being on top of a base output
            change_variable = {
                which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var
                value = 1
            }

            subtract_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = modifier:planet_$JOB_CAT$_$PRODUCTION$_produces_mult_offset }
            #account for giga also having modifiers with offsets, my offset is generic to allow compat
            subtract_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = modifier:giga_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_offset }

            # mult the whole thing by the extra pops mult
            multiply_variable = { which = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var value = fwt_planet_job_size }

        }
        # clear the var so that the deposit only needs to check is the var is set minimising perf loss
        else = {
            clear_variable = fwt_planet_$JOB_CAT$_$PRODUCTION$_produces_mult_var
        }
    }
}


fwt_pop_non_resource_mod = {
    optimize_memory
    if = {
        limit = {
            not = {
                check_modifier_value = {
                    modifier = $MODIFIER$
                    value = 0
                }
            }
        }
        planet = {
            set_variable = { which = fwt_$MODIFIER$_var value = prev.modifier:$MODIFIER$ }
            multiply_variable = { which = fwt_$MODIFIER$_var value = background_pops }
        }
    }

}#
# refactor first and second parts together
fwt_job_output_scale = {
    optimize_memory
    if = {
        limit = {
            fwt_$JOB$_job_check = yes
        }
        if = {
            limit = {
                not = {
                    planet = {
                        has_planet_flag = fwt_planet_$JOB$_produces_mult_flag
                    }
                }
            }
            planet = {
                set_timed_planet_flag = {
                    flag = fwt_planet_$JOB$_produces_mult_flag
                    days = 180
                }
            }
            fwt_get_bonus_param = { MODIFIER = planet_$JOB$_upkeep_mult }
            # production
            # some jobs have multiple alt upkeep/productions see researchers having 3 + 1 for compat
            [[PRODUCTION1]
                fwt_job_output_base_param = { JOB_NAME = $JOB_NAME$ JOB_CAT = $JOB$ PRODUCTION = $PRODUCTION1$ }
                fwt_get_bonus_param = { MODIFIER = planet_jobs_$PRODUCTION1$_upkeep_mult }
            ] [[PRODUCTION2]
                fwt_job_output_base_param = { JOB_NAME = $JOB_NAME$ JOB_CAT = $JOB$ PRODUCTION = $PRODUCTION2$ }
                fwt_get_bonus_param = { MODIFIER = planet_jobs_$PRODUCTION2$_upkeep_mult }
            ] [[PRODUCTION3]
                fwt_job_output_base_param = { JOB_NAME = $JOB_NAME$ JOB_CAT = $JOB$ PRODUCTION = $PRODUCTION3$ }
                fwt_get_bonus_param = { MODIFIER = planet_jobs_$PRODUCTION3$_upkeep_mult }
            ] [[PRODUCTION4]
                fwt_job_output_base_param = { JOB_NAME = $JOB_NAME$ JOB_CAT = $JOB$ PRODUCTION = $PRODUCTION4$ }
                fwt_get_bonus_param = { MODIFIER = planet_jobs_$PRODUCTION4$_upkeep_mult }
            ]
            # upkeep
            # 5 bc administrators can have 4 (normal, machine, hive, hive lithoid)
            [[UPKEEP1]
                fwt_set_job_size_variable_params = { MODIFIER = planet_$JOB$_$UPKEEP1$_upkeep }
            ]
            [[UPKEEP2]
                fwt_set_job_size_variable_params = { MODIFIER = planet_$JOB$_$UPKEEP2$_upkeep }
            ]
            [[UPKEEP3]
                fwt_set_job_size_variable_params = { MODIFIER = planet_$JOB$_$UPKEEP3$_upkeep }
            ]
            [[UPKEEP4]
                fwt_set_job_size_variable_params = { MODIFIER = planet_$JOB$_$UPKEEP4$_upkeep }
            ]
            [[UPKEEP5]
                fwt_set_job_size_variable_params = { MODIFIER = planet_$JOB$_$UPKEEP5$_upkeep }
            ]
            if = {
                limit = {
                    planet = {
                        not = {
                            check_variable = { which = fwt_planet_$JOB$_upkeep_mult_var value = 0 }
                        }
                    }
                }
                add_modifier = {
                    modifier = fwt_planet_$JOB$_upkeep_job_mult
                    multiplier = planet.fwt_planet_$JOB$_upkeep_mult_var
                    days = 1
                    time_multiplier = planet.fwt_event_time
                }
            }
        }
        [[PRODUCTION1]
            if = {
                limit = {
                    planet = {
                        not = {
                            check_variable = { which = fwt_planet_$JOB$_$PRODUCTION1$_produces_mult_var value = 0 }
                        }
                    }
                }
                add_modifier = {
                    modifier = fwt_$JOB$_$PRODUCTION1$_produces_job_mult
                    multiplier = planet.fwt_planet_$JOB$_$PRODUCTION1$_produces_mult_var
                    days = 1
                    time_multiplier = planet.fwt_event_time
                }
            }
        ]
        [[PRODUCTION2]
            if = {
                limit = {
                    planet = {
                        not = {
                            check_variable = { which = fwt_planet_$JOB$_$PRODUCTION2$_produces_mult_var value = 0 }
                        }
                    }
                }
                add_modifier = {
                    modifier = fwt_$JOB$_$PRODUCTION2$_produces_job_mult
                    multiplier = planet.fwt_planet_$JOB$_$PRODUCTION2$_produces_mult_var
                    days = 1
                    time_multiplier = planet.fwt_event_time
                }
            }
        ]
        [[PRODUCTION3]
            if = {
                limit = {
                    planet = {
                        not = {
                            check_variable = { which = fwt_planet_$JOB$_$PRODUCTION3$_produces_mult_var value = 0 }

                        }
                    }
                }
                add_modifier = {
                    modifier = fwt_$JOB$_$PRODUCTION3$_produces_job_mult
                    multiplier = planet.fwt_planet_$JOB$_$PRODUCTION3$_produces_mult_var
                    days = 1
                    time_multiplier = planet.fwt_event_time
                }
            }
        ]
        [[PRODUCTION4]
            if = {
                limit = {
                    planet = {
                        not = {
                            check_variable = { which = fwt_planet_$JOB$_$PRODUCTION4$_produces_mult_var value = 0 }
                        }
                    }
                }
                add_modifier = {
                    modifier = fwt_$JOB$_$PRODUCTION4$_produces_job_mult
                    multiplier = planet.fwt_planet_$JOB$_$PRODUCTION4$_produces_mult_var
                    days = 1
                    time_multiplier = planet.fwt_event_time
                }
            }
        ]
        [[UPKEEP1]
            if = {
                limit = {
                    planet = {
                        not = {
                            check_variable = { which = fwt_planet_$JOB$_$UPKEEP1$_upkeep_mult_var value = 0 }
                        }
                    }
                }
                add_modifier = {
                    modifier = fwt_$JOB$_$UPKEEP1$_upkeep_job_mult
                    multiplier = planet.fwt_planet_$JOB$_$UPKEEP1$_upkeep_mult_var
                    days = 1
                    time_multiplier = planet.fwt_event_time
                }
            }
        ]
        [[UPKEEP2]
            if = {
                limit = {
                    planet = {
                        not = {
                            check_variable = { which = fwt_planet_$JOB$_$UPKEEP2$_upkeep_mult_var value = 0 }
                        }
                    }
                }
                add_modifier = {
                    modifier = fwt_$JOB$_$UPKEEP2$_upkeep_job_mult
                    multiplier = planet.fwt_planet_$JOB$_$UPKEEP2$_upkeep_mult_var
                    days = 1
                    time_multiplier = planet.fwt_event_time
                }
            }
        ]
        [[UPKEEP3]
            if = {
                limit = {
                    planet = {
                        not = {
                            check_variable = { which = fwt_planet_$JOB$_$UPKEEP3$_upkeep_mult_var value = 0 }
                        }
                    }
                }
                add_modifier = {
                    modifier = fwt_$JOB$_$UPKEEP3$_upkeep_job_mult
                    multiplier = planet.fwt_planet_$JOB$_$UPKEEP3$_upkeep_mult_var
                    days = 1
                    time_multiplier = planet.fwt_event_time
                }
            }
        ]
        [[UPKEEP4]
            if = {
                limit = {
                    planet = {
                        not = {
                            check_variable = { which = fwt_planet_$JOB$_$UPKEEP4$_upkeep_mult_var value = 0 }
                        }
                    }
                }
                add_modifier = {
                    modifier = fwt_$JOB$_$UPKEEP4$_upkeep_job_mult
                    multiplier = planet.fwt_planet_$JOB$_$UPKEEP4$_upkeep_mult_var
                    days = 1
                    time_multiplier = planet.fwt_event_time
                }
            }
        ]
        [[UPKEEP5]
            if = {
                limit = {
                    planet = {
                        not = {
                            check_variable = { which = fwt_planet_$JOB$_$UPKEEP5$_upkeep_mult_var value = 0 }
                        }
                    }
                }
                add_modifier = {
                    modifier = fwt_$JOB$_$UPKEEP5$_upkeep_job_mult
                    multiplier = planet.fwt_planet_$JOB$_$UPKEEP5$_upkeep_mult_var
                    days = 1
                    time_multiplier = planet.fwt_event_time
                }
            }
        ]
    }
}